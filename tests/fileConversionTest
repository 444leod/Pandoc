#!/usr/bin/env python3

##
## EPITECH PROJECT, 2024
## Pandoc
## File description:
## funcTest
##

import unittest
import subprocess

def run_pandoc_with_args(args):
    process = subprocess.run(['./mypandoc'] + args, capture_output=True, text=True)
    return process.stdout, process.stderr, process.returncode

class CommandLineArgs(unittest.TestCase):

    def test_simple_json_to_markdown(self):
        stdout, stderr, returncode = run_pandoc_with_args(['-i', 'tests/testFiles/simpleFile/JsonInput.json', '-f', 'markdown'])
        with open('tests/testFiles/simpleFile/expectedSimpleMdOutput.md', 'r') as f:
            expected_output = f.read()
        self.assertEqual(returncode, 0)
        self.assertEqual(stderr, '')
        self.assertEqual(stdout, expected_output)

    def test_simple_json_to_xml(self):
        stdout, stderr, returncode = run_pandoc_with_args(['-i', 'tests/testFiles/simpleFile/JsonInput.json', '-f', 'xml'])
        with open('tests/testFiles/simpleFile/expectedSimpleXmlOutput.xml', 'r') as f:
            expected_output = f.read()
        self.assertEqual(returncode, 0)
        self.assertEqual(stderr, '')
        self.assertEqual(stdout, expected_output)

    def test_simple_markdown_to_json(self):
        stdout, stderr, returncode = run_pandoc_with_args(['-i', 'tests/testFiles/simpleFile/MdInput.md', '-f', 'json'])
        with open('tests/testFiles/simpleFile/expectedSimpleJsonOutput.json', 'r') as f:
            expected_output = f.read()
        self.assertEqual(returncode, 0)
        self.assertEqual(stderr, '')
        self.assertEqual(stdout, expected_output)

    def test_simple_markdown_to_xml(self):
        stdout, stderr, returncode = run_pandoc_with_args(['-i', 'tests/testFiles/simpleFile/MdInput.md', '-f', 'xml'])
        with open('tests/testFiles/simpleFile/expectedSimpleXmlOutput.xml', 'r') as f:
            expected_output = f.read()
        self.assertEqual(returncode, 0)
        self.assertEqual(stderr, '')
        self.assertEqual(stdout, expected_output)

    def test_simple_xml_to_json(self):
        stdout, stderr, returncode = run_pandoc_with_args(['-i', 'tests/testFiles/simpleFile/xmlInput.xml', '-f', 'json'])
        with open('tests/testFiles/simpleFile/expectedSimpleJsonOutput.json', 'r') as f:
            expected_output = f.read()
        self.assertEqual(returncode, 0)
        self.assertEqual(stderr, '')
        self.assertEqual(stdout, expected_output)

    def test_simple_xml_to_markdown(self):
        stdout, stderr, returncode = run_pandoc_with_args(['-i', 'tests/testFiles/simpleFile/xmlInput.xml', '-f', 'markdown'])
        with open('tests/testFiles/simpleFile/expectedSimpleMdOutput.md', 'r') as f:
            expected_output = f.read()
        self.assertEqual(returncode, 0)
        self.assertEqual(stderr, '')
        self.assertEqual(stdout, expected_output)

    def test_intermediate_json_to_markdown(self):
        stdout, stderr, returncode = run_pandoc_with_args(['-i', 'tests/testFiles/intermediateFile/JsonInput.json', '-f', 'markdown'])
        with open('tests/testFiles/intermediateFile/expectedJsonToMdOutput.md', 'r') as f:
            expected_output = f.read()
        self.assertEqual(returncode, 0)
        self.assertEqual(stderr, '')
        self.assertEqual(stdout, expected_output)

    def test_intermediate_json_to_xml(self):
        stdout, stderr, returncode = run_pandoc_with_args(['-i', 'tests/testFiles/intermediateFile/JsonInput.json', '-f', 'xml'])
        with open('tests/testFiles/intermediateFile/expectedJsonToXmlOutput.xml', 'r') as f:
            expected_output = f.read()
        self.assertEqual(returncode, 0)
        self.assertEqual(stderr, '')
        self.assertEqual(stdout, expected_output)

    def test_intermediate_markdown_to_json(self):
        stdout, stderr, returncode = run_pandoc_with_args(['-i', 'tests/testFiles/intermediateFile/MdInput.md', '-f', 'json'])
        with open('tests/testFiles/intermediateFile/expectedMdToJsonOutput.json', 'r') as f:
            expected_output = f.read()
        self.assertEqual(returncode, 0)
        self.assertEqual(stderr, '')
        self.assertEqual(stdout, expected_output)

    def test_intermediate_markdown_to_xml(self):
        stdout, stderr, returncode = run_pandoc_with_args(['-i', 'tests/testFiles/intermediateFile/intermediateFile/MdInput.md', '-f', 'xml'])
        with open('tests/testFiles/intermediateFile/expectedMdToXmlOutput.xml', 'r') as f:
            expected_output = f.read()
        self.assertEqual(returncode, 0)
        self.assertEqual(stderr, '')
        self.assertEqual(stdout, expected_output)

    def test_intermediate_xml_to_json(self):
        stdout, stderr, returncode = run_pandoc_with_args(['-i', 'tests/testFiles/intermediateFile/intermediateFile/XmlInput.xml', '-f', 'json'])
        with open('tests/testFiles/intermediateFile/expectedXmlToJsonOutput.json', 'r') as f:
            expected_output = f.read()
        self.assertEqual(returncode, 0)
        self.assertEqual(stderr, '')
        self.assertEqual(stdout, expected_output)

    def test_intermediate_xml_to_markdown(self):
        stdout, stderr, returncode = run_pandoc_with_args(['-i', 'tests/testFiles/intermediateFile/XmlInput.xml', '-f', 'markdown'])
        with open('tests/testFiles/intermediateFile/expectedXmlToMdOutput.md', 'r') as f:
            expected_output = f.read()
        self.assertEqual(returncode, 0)
        self.assertEqual(stderr, '')
        self.assertEqual(stdout, expected_output)

    def test_feat_codeblock_json_to_markdown(self):
        stdout, stderr, returncode = run_pandoc_with_args(['-i', 'tests/testFiles/featCodeblock/JsonCodeblock.json', '-f', 'markdown'])
        with open('tests/testFiles/featCodeblock/MdCodeblock.md', 'r') as f:
            expected_output = f.read()
        self.assertEqual(returncode, 0)
        self.assertEqual(stderr, '')
        self.assertEqual(stdout, expected_output)

    def test_feat_codeblock_json_to_xml(self):
        stdout, stderr, returncode = run_pandoc_with_args(['-i', 'tests/testFiles/featCodeblock/JsonCodeblock.json', '-f', 'xml'])
        with open('tests/testFiles/featCodeblock/XmlCodeblock.xml', 'r') as f:
            expected_output = f.read()
        self.assertEqual(returncode, 0)
        self.assertEqual(stderr, '')
        self.assertEqual(stdout, expected_output)

    def test_feat_codeblock_markdown_to_json(self):
        stdout, stderr, returncode = run_pandoc_with_args(['-i', 'tests/testFiles/featCodeblock/MdCodeblock.md', '-f', 'json'])
        with open('tests/testFiles/featCodeblock/JsonCodeblock.json', 'r') as f:
            expected_output = f.read()
        self.assertEqual(returncode, 0)
        self.assertEqual(stderr, '')
        self.assertEqual(stdout, expected_output)

    def test_feat_codeblock_markdown_to_xml(self):
        stdout, stderr, returncode = run_pandoc_with_args(['-i', 'tests/testFiles/featCodeblock/MdCodeblock.md', '-f', 'xml'])
        with open('tests/testFiles/featCodeblock/XmlCodeblock.xml', 'r') as f:
            expected_output = f.read()
        self.assertEqual(returncode, 0)
        self.assertEqual(stderr, '')
        self.assertEqual(stdout, expected_output)

    def test_feat_codeblock_xml_to_json(self):
        stdout, stderr, returncode = run_pandoc_with_args(['-i', 'tests/testFiles/featCodeblock/XmlCodeblock.xml', '-f', 'json'])
        with open('tests/testFiles/featCodeblock/JsonCodeblock.json', 'r') as f:
            expected_output = f.read()
        self.assertEqual(returncode, 0)
        self.assertEqual(stderr, '')
        self.assertEqual(stdout, expected_output)

    def test_feat_codeblock_xml_to_markdown(self):
        stdout, stderr, returncode = run_pandoc_with_args(['-i', 'tests/testFiles/featCodeblock/XmlCodeblock.xml', '-f', 'markdown'])
        with open('tests/testFiles/featCodeblock/MdCodeblock.md', 'r') as f:
            expected_output = f.read()
        self.assertEqual(returncode, 0)
        self.assertEqual(stderr, '')
        self.assertEqual(stdout, expected_output)

if __name__ == '__main__':
    unittest.main(verbosity=2)